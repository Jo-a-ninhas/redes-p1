#!/usr/bin/env python3
import asyncio
from ctypes import sizeof
from logging import exception
import re
import queue
from tcp import Servidor


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()

def ping(conexao, payload):
    conexao.enviar(b':server PING server :' + payload.split(b' ', 1)[1])
    


    #<FUNCAO> msg\r\n 
def dados_recebidos(conexao, dados):
    if dados == b'':
        print("Dados vazios")
        return sair(conexao)
    print(conexao, dados)

    dadosTratados = str(dados)[2:-5].split(' ', 1)
    
    if dadosTratados[0] == "PING":
        ping(conexao, dados)


    mensagem = b''

    # É preciso fazer o tratamento dos dados antes e assim que a mensagem estiver completa, o comando PART é implementado da seguinte forma:
    # if mensagem.startswith():
    #     canal = mensagem.split(b' ')[1] # Obtem-se o nome do canal que pode vir junto com um '\r'
    #     nome_canal = canal.split(b'\r')[0] # Obtem-se somente o nome do canal

    #     usuario = identifica_usuario(conexao).lower() # Dicionário para mapear cada apelido para a conexão
        
    #     for apelido in canais[nome_canal]: # Identifica cada participante do grupo e manda a mensagem de saída do usuário
    #         conexao_participante = identifica_conexao(apelido)
    #         conexao_participante.enviar(b':' + user + b' PART ' + nome_canal + b'\r\n')

    #     canais[nome_canal].remove(usuario) # Remove usuário do grupo

    #     mensagem = b''


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
