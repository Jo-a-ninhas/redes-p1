#!/usr/bin/env python3
import asyncio
from ctypes import sizeof
from logging import exception
import re
import queue
from tcp import Servidor


def validar_nome(nome):
    return re.match('^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

#:apelido QUIT :Connection closed
def sair(conexao):
    user = '*'
    if conexao in list(connections.values()):
        user = list(connections.keys())[list(connections.values()).index(conexao)]

    friends = []
    for g in groups.values():
        if conexao in g:
            for connection in g:
                if conexao != connection and not connection in friends:
                    friends.append(connection)
        if conexao in g:
            g.remove(conexao)


    for friend in friends:
        friend.enviar((f':{user} QUIT :Connetcion closer\r\n').encode('UTF-8'))

    print('conexão fechada')
    conexao.fechar()

    del connections[user]

def ping(conexao, payload):
    conexao.enviar(b':server PONG server :' + payload.split(b' ', 1)[1])
    
def nick(conexao, dados):
    #Nickname inválido

    current_nickname = '*'
    if conexao in list(connections.values()):
        current_nickname = list(connections.keys())[list(connections.values()).index(conexao)]

    if not(validar_nome(dados)):
        conexao.enviar((f':server 432 {current_nickname} {dados} :Erroneous nickname\r\n').encode('UTF-8'))
        return
    
    #Nickname disponível
    if not dados.lower() in [conn.lower() for conn in connections]:
        if current_nickname == '*':
            conexao.enviar((f':server 001 {dados} :Welcome\r\n').encode('UTF-8'))
            conexao.enviar((f':server 422 {dados} :MOTD File is missing\r\n').encode('UTF-8'))
        else:
            conexao.enviar((f':{current_nickname} NICK {dados}\r\n').encode('UTF-8'))
            del connections[current_nickname]
        connections[dados.lower()] = conexao
        return    

    #Nickname indisponível
    else:
        conexao.enviar((f':server 433 {current_nickname} {dados} :Nickname is already in use\r\n').encode('UTF-8'))
        return

def send_message_user(conexao, dados):
    remetente = '*'
    if conexao in list(connections.values()):
        remetente = list(connections.keys())[list(connections.values()).index(conexao)]

    receiver = connections.get(dados.split(' ', 1)[0].lower())

    if receiver is not None:
        message = (dados.split(' ', 1)[1])
        print("Enviando")
        receiver.enviar((f':{remetente} PRIVMSG {dados.split(" ", 1)[0].lower()} {message}\r\n').encode('UTF-8'))

def send_message_group(conexao, dados):
    remetente = '*'
    if conexao in list(connections.values()):
        remetente = list(connections.keys())[list(connections.values()).index(conexao)]

    receiver = groups.get(dados.split(' ', 1)[0].lower())
    if receiver is not None:
        message = (dados.split(' ', 1)[1])
        for user in receiver:
            if user != conexao:
                user.enviar((f':{remetente} PRIVMSG {dados.split(" ", 1)[0].lower()} {message}\r\n').encode('UTF-8'))

def send_message(conexao, dados):
    if(dados[0] == '#'):
        print('sending to group')
        send_message_group(conexao, dados)
    else:
        print('sending to user')
        send_message_user(conexao, dados)

def print_users(conexao):
    print(groups)

def join_group(conexao, dados):
    if dados[0] != '#' and not validar_nome(dados[1:]):
        conexao.enviar((f'server 403 {dados} :No such channel\n').encode('UTF-8'))
        return
    g = groups.get(dados.lower())
    if g is not None:
        g.append(conexao)
    else:
        groups[dados.lower()] = [conexao]
    g = groups.get(dados.lower())

    remetente = '*'
    if conexao in list(connections.values()):
        remetente = list(connections.keys())[list(connections.values()).index(conexao)]

    for user in g:
        user.enviar((f':{remetente} JOIN :{dados}\r\n').encode('UTF-8'))

    chanelMemberList = []
    for connection in g:
        member = list(connections.keys())[list(connections.values()).index(connection)]
        chanelMemberList.append(member)
    chanelMemberList.sort()
    message = f':server 353 {remetente} = {dados} :' 
    for s in chanelMemberList:
        message += str(s) + " "
    conexao.enviar((message + '\n').encode('UTF-8'))

    conexao.enviar((f':server 366 {remetente} {dados} :End of /NAMES list.\r\n').encode('UTF-8'))

def leave_group(conexao, dados):
    dados = dados.split(" ")[0]
    group = groups.get(dados.lower())
    if group is not None:
        group.remove(conexao)

    remetente = '*'
    if conexao in list(connections.values()):
        remetente = list(connections.keys())[list(connections.values()).index(conexao)]

    conexao.enviar((f':{remetente} PART {dados}\r\n').encode('UTF-8'))
    for user in group:
        user.enviar((f':{remetente} PART {dados}\r\n').encode('UTF-8'))

def dados_recebidos(conexao, dados):
    if dados == b'':
        print("Dados vazios")
        return sair(conexao)
    print(conexao, dados)

    if msgs.get(conexao) is None:
        msgs[conexao] = dados
    else:
        msgs[conexao] += dados

    print(msgs[conexao].decode('UTF-8').find('\r\n'))
    if msgs[conexao].decode('UTF-8').find('\r\n') < 0:
        print(msgs[conexao].decode('UTF-8'))
        return

    dadosBinarios = msgs[conexao]
    dadosTratados = dadosBinarios.decode('UTF-8')

    #print(dadosTratados)
    #dadosTratados = str(dados)[2:-5].split(' ', 1)
        
    while '\r\n' in dadosTratados:

        comando, dadosTratados = dadosTratados.split('\r\n', 1)
        comando = comando.split(' ', 1)

        if comando[0] == 'PING':
            mensagem = comando[0] + ' ' + comando[1] + '\r\n'
            msg_encode = mensagem.encode('UTF-8')
            ping(conexao, msg_encode)

        if comando[0] == 'NICK':
            nick(conexao, comando[1])

        if comando[0] == 'PRIVMSG' or comando[0]=='msg':
            print(comando)
            send_message(conexao, comando[1])

        if comando[0] == 'JOIN':
            join_group(conexao, comando[1])

        if comando[0] == 'PART':
            leave_group(conexao, comando[1])

        if comando[0] == 'grps':
            print_users(conexao)

    if(dadosTratados != ''):
        msgs[conexao] = dadosTratados.encode("UTF-8")
        return

    del msgs[conexao]

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)

msgs = dict()
connections = dict()
groups = dict()
servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
